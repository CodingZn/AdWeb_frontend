@startuml Game
class Game {
  +views: View[]
}

abstract class View {
  +sceneManager: SceneManager
  +objectManager: ObjectManager
  +perspectiveManager: PerspectiveManager
  +controlManager: ControlManager
  +mount()
  +mount()
  +unmount()
  +render(dt)
  +on()
  +off()
  -emit()
}

class ProfileView {

}

class SceneManager {
  +add(renderable)
  +switch(sceneName, { background, ambient, ... })
}

class ObjectManager {
  +assetManager
  +get(name): Renderable
}

class AssetManager {
  +get(urls): Promise<any> | Promise<any[]>
}

class PerspectiveManager {
  +getter camera
  +switch(type, { x, y, z, targetX, targetY, targetZ })
}

class ControlManager {
  +on(camera)
  +off()
}

abstract class Renderable {
  +object
  +update({ x, y, z, color, width, height, depth, transform, ... })
  +transform({ scale, rotateX, rotateY, rotateZ, tanslateX, ... })
}

ProfileView --- View
AssetManager --o ObjectManager
Renderable --o ObjectManager
ObjectManager --o View
SceneManager --o View
PerspectiveManager --o View
ControlManager --o View
View --> Game
